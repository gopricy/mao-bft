// protoc -I pb pb/maobft.proto --go_out=plugins=grpc:pb
syntax = "proto3";

option go_package = ".;pb";
package pb;

// A merkle proof is a data structure that proves a content is stored in the Merkle tree.
message MerkleProof {
  // The root of Merkle tree, it's a SHA256 hash.
  bytes root = 1;
  // the proof pairs from bottom up.
  repeated ProofPair proof_pairs = 2;
}

// ProofPair defines 2 hash values in the same layer of Merkle tree, that jointly calculate the parent.
// For example:
// * (parent primary)
// | \
// *  * secondary
// primary
message ProofPair {
  // primary is the content's ancestor node hash value.
  bytes primary = 1;
  // secondary is the helper of primary, in order to get the parent node's hash.
  bytes secondary = 2;
  // is primary the right child of parent.
  bool isRightChild = 3;
}

message Payload{
  MerkleProof merkle_proof = 1;
  bytes data = 2;
}

enum BlockState {
  BS_UNKNOWN = 0;
  BS_PENDING = 1; // Block has been send from leader to followers.
  BS_STAGED = 2; // Block has been staged in blockchain, but not committed yet.
  BS_COMMITTED = 3; // Block is committed in chain.
}

// This serves as the logger for blockchain. Any
message BlockDump {
  // The block to log
  Block block = 1;
  // The state of blockchain.
  BlockState state = 2;
}

message Block {
  // The content of this block, which hashes to cur_hash.
  BlockContent content = 1;
  // Hash of this block.
  bytes cur_hash = 2;
}

message BlockContent {
  // This defines the transactions that is contained in this block.
  repeated Transaction txs = 1;
  // Hash of previous block, nil if block is head.
  bytes prev_hash = 2;
}

// This message contains the message for a simple wire system.
message WireMessage {
  string from_id = 1;
  string to_id = 2;
  int32 amount = 3;
}

// This message defines a deposit action performed by a administrative client.
// TODO(chenweilunster): verify caller identity is administrator.
message DepositMessage {
  string account_id = 1;
  int32 amount = 2;
}

message Transaction {
  // Optional, unique identifier of a transaction.
  string transaction_uuid = 1;
  oneof message {
    WireMessage wire_msg = 2;
    DepositMessage deposit_msg = 3;
  }
}

message PrepareResponse{}

message EchoResponse{}

message ReadyRequest{
  bytes merkle_root = 1;
}

message ReadyResponse{}

service Prepare{
  rpc Prepare(Payload) returns (PrepareResponse) {}
}

service Echo{
  rpc Echo(Payload) returns (EchoResponse) {}
}

service Ready{
  rpc Ready(ReadyRequest) returns (ReadyResponse) {}
}

message ProposeTransactionRequest {
  Transaction transaction = 1;
  // TODO(chenweilunster): Implement client signature authentication.
}

message ProposeTransactionResponse {
  // Server assigned uuid for this transaction. This transaction is used to get transaction status.
  string transaction_uuid = 1;
}

enum TransactionStatus {
  UNKNOWN = 0; // This usually mean transaction is queued but not RBC'ed.
  REJECTED = 1; // Transaction is rejected by leader.
  PENDING = 2; // Transaction has been send from leader to followers.
  STAGED = 3; // Transaction has been staged in blockchain, but not committed yet.
  COMMITTED = 4; // Transaction is committed in chain.
}

message GetTransactionStatusRequest {
  string transaction_uuid = 1;
}

message GetTransactionStatusResponse {
  TransactionStatus status = 1;
}

// ProposeTransaction is sent from client to leader.
service TransactionService {
  // ProposeTransaction allows a client to propose a transaction.
  rpc ProposeTransaction(ProposeTransactionRequest) returns (ProposeTransactionResponse) {}
  // GetTransactionStatus returns status of transaction.
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse) {}
}
