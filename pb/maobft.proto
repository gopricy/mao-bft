// protoc -I pb pb/maobft.proto --go_out=plugins=grpc:pb
syntax = "proto3";

package pb;

// A merkle proof is a data structure that proves a content is stored in the Merkle tree.
message MerkleProof {
  // The root of Merkle tree, it's a SHA256 hash.
  bytes root = 1;
  // the proof pairs from bottom up.
  repeated ProofPair proof_pairs = 2;
}

// ProofPair defines 2 hash values in the same layer of Merkle tree, that jointly calculate the parent.
// For example:
// * (parent primary)
// | \
// *  * secondary
// primary
message ProofPair {
  // primary is the content's ancestor node hash value.
  bytes primary = 1;
  // secondary is the helper of primary, in order to get the parent node's hash.
  bytes secondary = 2;
}

message Payload{
  MerkleProof merkle_proof = 1;
  bytes data = 2;
}

message Block {
  // This defines the transactions that is contained in this block.
  repeated Transaction txs = 1;
  // Hash of previous block, nil if block is head.
  bytes prev_hash = 2;
  // Hash of this block.
  bytes cur_hash = 3;
  // Location of this block on blockchain.
  int32 seq_number = 4;
}

message SimpleKeyValueStoreMessage {
  // the key that we're changing value.
  string key = 1;
  // the value we assign to this key.
  string value = 2;
}

message Transaction {
  oneof message {
    // This message is used to implement simple key value store.
    SimpleKeyValueStoreMessage kv_pair = 1;
  }
}



message PrepareResponse{}

message EchoResponse{}

message ReadyRequest{
  bytes merkle_root = 1;
}

message ReadyResponse{}

service Prepare{
  rpc Prepare(Payload) returns (PrepareResponse) {}
}

service Echo{
  rpc Echo(Payload) returns (EchoResponse) {}
}

service Ready{
  rpc Ready(ReadyRequest) returns (ReadyResponse) {}
}
