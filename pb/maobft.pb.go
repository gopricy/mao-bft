// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maobft.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionStatus int32

const (
	TransactionStatus_UNKNOWN   TransactionStatus = 0
	TransactionStatus_REJECTED  TransactionStatus = 1
	TransactionStatus_PENDING   TransactionStatus = 2
	TransactionStatus_STAGED    TransactionStatus = 3
	TransactionStatus_COMMITTED TransactionStatus = 4
)

var TransactionStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "REJECTED",
	2: "PENDING",
	3: "STAGED",
	4: "COMMITTED",
}

var TransactionStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"REJECTED":  1,
	"PENDING":   2,
	"STAGED":    3,
	"COMMITTED": 4,
}

func (x TransactionStatus) String() string {
	return proto.EnumName(TransactionStatus_name, int32(x))
}

func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{0}
}

// A merkle proof is a data structure that proves a content is stored in the Merkle tree.
type MerkleProof struct {
	// The root of Merkle tree, it's a SHA256 hash.
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// the proof pairs from bottom up.
	ProofPairs           []*ProofPair `protobuf:"bytes,2,rep,name=proof_pairs,json=proofPairs,proto3" json:"proof_pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MerkleProof) Reset()         { *m = MerkleProof{} }
func (m *MerkleProof) String() string { return proto.CompactTextString(m) }
func (*MerkleProof) ProtoMessage()    {}
func (*MerkleProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{0}
}

func (m *MerkleProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleProof.Unmarshal(m, b)
}
func (m *MerkleProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleProof.Marshal(b, m, deterministic)
}
func (m *MerkleProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleProof.Merge(m, src)
}
func (m *MerkleProof) XXX_Size() int {
	return xxx_messageInfo_MerkleProof.Size(m)
}
func (m *MerkleProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleProof.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleProof proto.InternalMessageInfo

func (m *MerkleProof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *MerkleProof) GetProofPairs() []*ProofPair {
	if m != nil {
		return m.ProofPairs
	}
	return nil
}

// ProofPair defines 2 hash values in the same layer of Merkle tree, that jointly calculate the parent.
// For example:
// * (parent primary)
// | \
// *  * secondary
// primary
type ProofPair struct {
	// primary is the content's ancestor node hash value.
	Primary []byte `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// secondary is the helper of primary, in order to get the parent node's hash.
	Secondary []byte `protobuf:"bytes,2,opt,name=secondary,proto3" json:"secondary,omitempty"`
	// is primary the right child of parent.
	IsRightChild         bool     `protobuf:"varint,3,opt,name=isRightChild,proto3" json:"isRightChild,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProofPair) Reset()         { *m = ProofPair{} }
func (m *ProofPair) String() string { return proto.CompactTextString(m) }
func (*ProofPair) ProtoMessage()    {}
func (*ProofPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{1}
}

func (m *ProofPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProofPair.Unmarshal(m, b)
}
func (m *ProofPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProofPair.Marshal(b, m, deterministic)
}
func (m *ProofPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofPair.Merge(m, src)
}
func (m *ProofPair) XXX_Size() int {
	return xxx_messageInfo_ProofPair.Size(m)
}
func (m *ProofPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofPair.DiscardUnknown(m)
}

var xxx_messageInfo_ProofPair proto.InternalMessageInfo

func (m *ProofPair) GetPrimary() []byte {
	if m != nil {
		return m.Primary
	}
	return nil
}

func (m *ProofPair) GetSecondary() []byte {
	if m != nil {
		return m.Secondary
	}
	return nil
}

func (m *ProofPair) GetIsRightChild() bool {
	if m != nil {
		return m.IsRightChild
	}
	return false
}

type Payload struct {
	MerkleProof          *MerkleProof `protobuf:"bytes,1,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	Data                 []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{2}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetMerkleProof() *MerkleProof {
	if m != nil {
		return m.MerkleProof
	}
	return nil
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Block struct {
	// The content of this block, which hashes to cur_hash.
	Content *BlockContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Hash of this block.
	CurHash              []byte   `protobuf:"bytes,2,opt,name=cur_hash,json=curHash,proto3" json:"cur_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{3}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetContent() *BlockContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Block) GetCurHash() []byte {
	if m != nil {
		return m.CurHash
	}
	return nil
}

type BlockContent struct {
	// This defines the transactions that is contained in this block.
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	// Hash of previous block, nil if block is head.
	PrevHash []byte `protobuf:"bytes,2,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// Location of this block on blockchain.
	SeqNumber            int32    `protobuf:"varint,3,opt,name=seq_number,json=seqNumber,proto3" json:"seq_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockContent) Reset()         { *m = BlockContent{} }
func (m *BlockContent) String() string { return proto.CompactTextString(m) }
func (*BlockContent) ProtoMessage()    {}
func (*BlockContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{4}
}

func (m *BlockContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockContent.Unmarshal(m, b)
}
func (m *BlockContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockContent.Marshal(b, m, deterministic)
}
func (m *BlockContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockContent.Merge(m, src)
}
func (m *BlockContent) XXX_Size() int {
	return xxx_messageInfo_BlockContent.Size(m)
}
func (m *BlockContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockContent.DiscardUnknown(m)
}

var xxx_messageInfo_BlockContent proto.InternalMessageInfo

func (m *BlockContent) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockContent) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *BlockContent) GetSeqNumber() int32 {
	if m != nil {
		return m.SeqNumber
	}
	return 0
}

type SimpleKeyValueStoreMessage struct {
	// the key that we're changing value.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// the value we assign to this key.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleKeyValueStoreMessage) Reset()         { *m = SimpleKeyValueStoreMessage{} }
func (m *SimpleKeyValueStoreMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleKeyValueStoreMessage) ProtoMessage()    {}
func (*SimpleKeyValueStoreMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{5}
}

func (m *SimpleKeyValueStoreMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleKeyValueStoreMessage.Unmarshal(m, b)
}
func (m *SimpleKeyValueStoreMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleKeyValueStoreMessage.Marshal(b, m, deterministic)
}
func (m *SimpleKeyValueStoreMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleKeyValueStoreMessage.Merge(m, src)
}
func (m *SimpleKeyValueStoreMessage) XXX_Size() int {
	return xxx_messageInfo_SimpleKeyValueStoreMessage.Size(m)
}
func (m *SimpleKeyValueStoreMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleKeyValueStoreMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleKeyValueStoreMessage proto.InternalMessageInfo

func (m *SimpleKeyValueStoreMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SimpleKeyValueStoreMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// This message contains the message for a simple wire system.
type WireMessage struct {
	FromId               string   `protobuf:"bytes,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId                 string   `protobuf:"bytes,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	Amount               int32    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WireMessage) Reset()         { *m = WireMessage{} }
func (m *WireMessage) String() string { return proto.CompactTextString(m) }
func (*WireMessage) ProtoMessage()    {}
func (*WireMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{6}
}

func (m *WireMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WireMessage.Unmarshal(m, b)
}
func (m *WireMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WireMessage.Marshal(b, m, deterministic)
}
func (m *WireMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireMessage.Merge(m, src)
}
func (m *WireMessage) XXX_Size() int {
	return xxx_messageInfo_WireMessage.Size(m)
}
func (m *WireMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WireMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WireMessage proto.InternalMessageInfo

func (m *WireMessage) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *WireMessage) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *WireMessage) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// This message defines a deposit action performed by a administrative client.
// TODO(chenweilunster): verify caller identity is administrator.
type DepositMessage struct {
	AccountId            string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Amount               int32    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositMessage) Reset()         { *m = DepositMessage{} }
func (m *DepositMessage) String() string { return proto.CompactTextString(m) }
func (*DepositMessage) ProtoMessage()    {}
func (*DepositMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{7}
}

func (m *DepositMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositMessage.Unmarshal(m, b)
}
func (m *DepositMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositMessage.Marshal(b, m, deterministic)
}
func (m *DepositMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositMessage.Merge(m, src)
}
func (m *DepositMessage) XXX_Size() int {
	return xxx_messageInfo_DepositMessage.Size(m)
}
func (m *DepositMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DepositMessage proto.InternalMessageInfo

func (m *DepositMessage) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *DepositMessage) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Transaction struct {
	// Optional, unique identifier of a transaction.
	TransactionUuid string `protobuf:"bytes,1,opt,name=transaction_uuid,json=transactionUuid,proto3" json:"transaction_uuid,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Transaction_KvPairMsg
	//	*Transaction_WireMsg
	//	*Transaction_DepositMsg
	Message              isTransaction_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{8}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransactionUuid() string {
	if m != nil {
		return m.TransactionUuid
	}
	return ""
}

type isTransaction_Message interface {
	isTransaction_Message()
}

type Transaction_KvPairMsg struct {
	KvPairMsg *SimpleKeyValueStoreMessage `protobuf:"bytes,2,opt,name=kv_pair_msg,json=kvPairMsg,proto3,oneof"`
}

type Transaction_WireMsg struct {
	WireMsg *WireMessage `protobuf:"bytes,3,opt,name=wire_msg,json=wireMsg,proto3,oneof"`
}

type Transaction_DepositMsg struct {
	DepositMsg *DepositMessage `protobuf:"bytes,4,opt,name=deposit_msg,json=depositMsg,proto3,oneof"`
}

func (*Transaction_KvPairMsg) isTransaction_Message() {}

func (*Transaction_WireMsg) isTransaction_Message() {}

func (*Transaction_DepositMsg) isTransaction_Message() {}

func (m *Transaction) GetMessage() isTransaction_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Transaction) GetKvPairMsg() *SimpleKeyValueStoreMessage {
	if x, ok := m.GetMessage().(*Transaction_KvPairMsg); ok {
		return x.KvPairMsg
	}
	return nil
}

func (m *Transaction) GetWireMsg() *WireMessage {
	if x, ok := m.GetMessage().(*Transaction_WireMsg); ok {
		return x.WireMsg
	}
	return nil
}

func (m *Transaction) GetDepositMsg() *DepositMessage {
	if x, ok := m.GetMessage().(*Transaction_DepositMsg); ok {
		return x.DepositMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transaction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transaction_KvPairMsg)(nil),
		(*Transaction_WireMsg)(nil),
		(*Transaction_DepositMsg)(nil),
	}
}

type PrepareResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareResponse) Reset()         { *m = PrepareResponse{} }
func (m *PrepareResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareResponse) ProtoMessage()    {}
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{9}
}

func (m *PrepareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareResponse.Unmarshal(m, b)
}
func (m *PrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareResponse.Marshal(b, m, deterministic)
}
func (m *PrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareResponse.Merge(m, src)
}
func (m *PrepareResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareResponse.Size(m)
}
func (m *PrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareResponse proto.InternalMessageInfo

type EchoResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{10}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

type ReadyRequest struct {
	MerkleRoot           []byte   `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadyRequest) Reset()         { *m = ReadyRequest{} }
func (m *ReadyRequest) String() string { return proto.CompactTextString(m) }
func (*ReadyRequest) ProtoMessage()    {}
func (*ReadyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{11}
}

func (m *ReadyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyRequest.Unmarshal(m, b)
}
func (m *ReadyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyRequest.Marshal(b, m, deterministic)
}
func (m *ReadyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyRequest.Merge(m, src)
}
func (m *ReadyRequest) XXX_Size() int {
	return xxx_messageInfo_ReadyRequest.Size(m)
}
func (m *ReadyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyRequest proto.InternalMessageInfo

func (m *ReadyRequest) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type ReadyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadyResponse) Reset()         { *m = ReadyResponse{} }
func (m *ReadyResponse) String() string { return proto.CompactTextString(m) }
func (*ReadyResponse) ProtoMessage()    {}
func (*ReadyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{12}
}

func (m *ReadyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyResponse.Unmarshal(m, b)
}
func (m *ReadyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyResponse.Marshal(b, m, deterministic)
}
func (m *ReadyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyResponse.Merge(m, src)
}
func (m *ReadyResponse) XXX_Size() int {
	return xxx_messageInfo_ReadyResponse.Size(m)
}
func (m *ReadyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyResponse proto.InternalMessageInfo

type ProposeTransactionRequest struct {
	Transaction          *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProposeTransactionRequest) Reset()         { *m = ProposeTransactionRequest{} }
func (m *ProposeTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*ProposeTransactionRequest) ProtoMessage()    {}
func (*ProposeTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{13}
}

func (m *ProposeTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeTransactionRequest.Unmarshal(m, b)
}
func (m *ProposeTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeTransactionRequest.Marshal(b, m, deterministic)
}
func (m *ProposeTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeTransactionRequest.Merge(m, src)
}
func (m *ProposeTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_ProposeTransactionRequest.Size(m)
}
func (m *ProposeTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeTransactionRequest proto.InternalMessageInfo

func (m *ProposeTransactionRequest) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type ProposeTransactionResponse struct {
	// Server assigned uuid for this transaction. This transaction is used to get transaction status.
	TransactionUuid      string   `protobuf:"bytes,1,opt,name=transaction_uuid,json=transactionUuid,proto3" json:"transaction_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposeTransactionResponse) Reset()         { *m = ProposeTransactionResponse{} }
func (m *ProposeTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ProposeTransactionResponse) ProtoMessage()    {}
func (*ProposeTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{14}
}

func (m *ProposeTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeTransactionResponse.Unmarshal(m, b)
}
func (m *ProposeTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeTransactionResponse.Marshal(b, m, deterministic)
}
func (m *ProposeTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeTransactionResponse.Merge(m, src)
}
func (m *ProposeTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ProposeTransactionResponse.Size(m)
}
func (m *ProposeTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeTransactionResponse proto.InternalMessageInfo

func (m *ProposeTransactionResponse) GetTransactionUuid() string {
	if m != nil {
		return m.TransactionUuid
	}
	return ""
}

type GetTransactionStatusRequest struct {
	TransactionUuid      string   `protobuf:"bytes,1,opt,name=transaction_uuid,json=transactionUuid,proto3" json:"transaction_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionStatusRequest) Reset()         { *m = GetTransactionStatusRequest{} }
func (m *GetTransactionStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionStatusRequest) ProtoMessage()    {}
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{15}
}

func (m *GetTransactionStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionStatusRequest.Unmarshal(m, b)
}
func (m *GetTransactionStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionStatusRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionStatusRequest.Merge(m, src)
}
func (m *GetTransactionStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionStatusRequest.Size(m)
}
func (m *GetTransactionStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionStatusRequest proto.InternalMessageInfo

func (m *GetTransactionStatusRequest) GetTransactionUuid() string {
	if m != nil {
		return m.TransactionUuid
	}
	return ""
}

type GetTransactionStatusResponse struct {
	Status               TransactionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pb.TransactionStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetTransactionStatusResponse) Reset()         { *m = GetTransactionStatusResponse{} }
func (m *GetTransactionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionStatusResponse) ProtoMessage()    {}
func (*GetTransactionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58dda516c73d392, []int{16}
}

func (m *GetTransactionStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionStatusResponse.Unmarshal(m, b)
}
func (m *GetTransactionStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionStatusResponse.Merge(m, src)
}
func (m *GetTransactionStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionStatusResponse.Size(m)
}
func (m *GetTransactionStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionStatusResponse proto.InternalMessageInfo

func (m *GetTransactionStatusResponse) GetStatus() TransactionStatus {
	if m != nil {
		return m.Status
	}
	return TransactionStatus_UNKNOWN
}

func init() {
	proto.RegisterEnum("pb.TransactionStatus", TransactionStatus_name, TransactionStatus_value)
	proto.RegisterType((*MerkleProof)(nil), "pb.MerkleProof")
	proto.RegisterType((*ProofPair)(nil), "pb.ProofPair")
	proto.RegisterType((*Payload)(nil), "pb.Payload")
	proto.RegisterType((*Block)(nil), "pb.Block")
	proto.RegisterType((*BlockContent)(nil), "pb.BlockContent")
	proto.RegisterType((*SimpleKeyValueStoreMessage)(nil), "pb.SimpleKeyValueStoreMessage")
	proto.RegisterType((*WireMessage)(nil), "pb.WireMessage")
	proto.RegisterType((*DepositMessage)(nil), "pb.DepositMessage")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*PrepareResponse)(nil), "pb.PrepareResponse")
	proto.RegisterType((*EchoResponse)(nil), "pb.EchoResponse")
	proto.RegisterType((*ReadyRequest)(nil), "pb.ReadyRequest")
	proto.RegisterType((*ReadyResponse)(nil), "pb.ReadyResponse")
	proto.RegisterType((*ProposeTransactionRequest)(nil), "pb.ProposeTransactionRequest")
	proto.RegisterType((*ProposeTransactionResponse)(nil), "pb.ProposeTransactionResponse")
	proto.RegisterType((*GetTransactionStatusRequest)(nil), "pb.GetTransactionStatusRequest")
	proto.RegisterType((*GetTransactionStatusResponse)(nil), "pb.GetTransactionStatusResponse")
}

func init() { proto.RegisterFile("maobft.proto", fileDescriptor_e58dda516c73d392) }

var fileDescriptor_e58dda516c73d392 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x73, 0x1a, 0x37,
	0x14, 0xe5, 0x1b, 0xf6, 0x2e, 0xb6, 0xf1, 0x4d, 0xda, 0x12, 0x12, 0x27, 0xee, 0xbe, 0xd4, 0xcd,
	0x34, 0x64, 0x4a, 0xa7, 0xd3, 0x3e, 0xb6, 0x31, 0x0c, 0xb8, 0x19, 0x08, 0x11, 0x76, 0xf2, 0xd0,
	0x07, 0x46, 0xec, 0xca, 0xb0, 0x03, 0x8b, 0xd6, 0x92, 0x96, 0xd6, 0xff, 0xb0, 0xbf, 0xa5, 0xbf,
	0xa2, 0x23, 0xad, 0x30, 0x4b, 0x63, 0x67, 0x26, 0x4f, 0x48, 0xf7, 0x9e, 0x73, 0xa4, 0x7b, 0xef,
	0x41, 0x0b, 0xf5, 0x88, 0xf2, 0xd9, 0xb5, 0x6a, 0xc7, 0x82, 0x2b, 0x8e, 0x85, 0x78, 0xe6, 0xbd,
	0x07, 0x77, 0xc8, 0xc4, 0x72, 0xc5, 0xc6, 0x82, 0xf3, 0x6b, 0x44, 0x28, 0x09, 0xce, 0x55, 0x33,
	0x7f, 0x9a, 0x3f, 0xab, 0x13, 0xb3, 0xc6, 0x36, 0xb8, 0xb1, 0x4e, 0x4e, 0x63, 0x1a, 0x0a, 0xd9,
	0x2c, 0x9c, 0x16, 0xcf, 0xdc, 0xce, 0x41, 0x3b, 0x9e, 0xb5, 0x0d, 0x67, 0x4c, 0x43, 0x41, 0x20,
	0xde, 0x2e, 0xa5, 0x37, 0x07, 0xe7, 0x2e, 0x81, 0x4d, 0xa8, 0xc6, 0x22, 0x8c, 0xa8, 0xb8, 0xb5,
	0x9a, 0xdb, 0x2d, 0x3e, 0x03, 0x47, 0x32, 0x9f, 0xaf, 0x03, 0x9d, 0x2b, 0x98, 0xdc, 0x2e, 0x80,
	0x1e, 0xd4, 0x43, 0x49, 0xc2, 0xf9, 0x42, 0x9d, 0x2f, 0xc2, 0x55, 0xd0, 0x2c, 0x9e, 0xe6, 0xcf,
	0x6a, 0x64, 0x2f, 0xe6, 0xbd, 0x87, 0xea, 0x98, 0xde, 0xae, 0x38, 0x0d, 0xb0, 0x03, 0xf5, 0xc8,
	0x94, 0x31, 0x35, 0x17, 0x31, 0x67, 0xb9, 0x9d, 0x23, 0x7d, 0xc9, 0x4c, 0x79, 0xc4, 0x8d, 0xf6,
	0x6b, 0x0d, 0xa8, 0xa2, 0xf6, 0x6c, 0xb3, 0xf6, 0x46, 0x50, 0x7e, 0xb3, 0xe2, 0xfe, 0x12, 0x5f,
	0x42, 0xd5, 0xe7, 0x6b, 0xc5, 0xd6, 0xca, 0x6a, 0x35, 0xb4, 0x96, 0xc9, 0x9d, 0xa7, 0x71, 0xb2,
	0x05, 0xe0, 0x13, 0xa8, 0xf9, 0x89, 0x98, 0x2e, 0xa8, 0x5c, 0x58, 0xb1, 0xaa, 0x9f, 0x88, 0x01,
	0x95, 0x0b, 0x2f, 0x82, 0x7a, 0x96, 0x83, 0xdf, 0x42, 0x51, 0xfd, 0x2d, 0x9b, 0x79, 0xd3, 0x43,
	0x73, 0xbd, 0x4b, 0x41, 0xd7, 0x92, 0xfa, 0x2a, 0xe4, 0x6b, 0xa2, 0x73, 0xf8, 0x14, 0x9c, 0x58,
	0xb0, 0x4d, 0x56, 0xae, 0xa6, 0x03, 0x5a, 0x0f, 0x4f, 0x00, 0x24, 0xbb, 0x99, 0xae, 0x93, 0x68,
	0xc6, 0x84, 0x69, 0x4a, 0x59, 0x77, 0xed, 0x66, 0x64, 0x02, 0x5e, 0x17, 0x5a, 0x93, 0x30, 0x8a,
	0x57, 0xec, 0x2d, 0xbb, 0xfd, 0x40, 0x57, 0x09, 0x9b, 0x28, 0x2e, 0xd8, 0x90, 0x49, 0x49, 0xe7,
	0x0c, 0x1b, 0x50, 0x5c, 0xb2, 0x74, 0x0e, 0x0e, 0xd1, 0x4b, 0x7c, 0x0c, 0xe5, 0x8d, 0x86, 0x99,
	0x73, 0x1c, 0x92, 0x6e, 0xbc, 0x09, 0xb8, 0x1f, 0xc3, 0x1d, 0xed, 0x1b, 0xa8, 0x5e, 0x0b, 0x1e,
	0x4d, 0xc3, 0xc0, 0x52, 0x2b, 0x7a, 0x7b, 0x11, 0xe0, 0x23, 0x28, 0x2b, 0xae, 0xc3, 0x29, 0xbb,
	0xa4, 0xf8, 0x45, 0x80, 0x5f, 0x43, 0x85, 0x46, 0x3c, 0x59, 0x2b, 0x7b, 0x3b, 0xbb, 0xf3, 0xfa,
	0x70, 0xd8, 0x65, 0x31, 0x97, 0xa1, 0xda, 0xea, 0x9e, 0x00, 0x50, 0xdf, 0xd7, 0xc9, 0x9d, 0xb4,
	0x63, 0x23, 0x7b, 0x42, 0x85, 0x3d, 0xa1, 0x7f, 0xf3, 0xe0, 0x66, 0x9a, 0x86, 0xdf, 0x43, 0x43,
	0xed, 0xb6, 0xd3, 0x24, 0xb9, 0x13, 0x3b, 0xca, 0xc4, 0xaf, 0x92, 0x30, 0xc0, 0xdf, 0xc0, 0x5d,
	0x6e, 0x8c, 0x8d, 0xa7, 0x91, 0x9c, 0x1b, 0x5d, 0xb7, 0xf3, 0x5c, 0x4f, 0xe1, 0xe1, 0xae, 0x0d,
	0x72, 0xc4, 0x59, 0x6e, 0xb4, 0x97, 0x87, 0x72, 0x8e, 0x3f, 0x40, 0xed, 0xaf, 0x50, 0x30, 0x43,
	0x2f, 0xee, 0x3c, 0x96, 0x69, 0xd7, 0x20, 0x47, 0xaa, 0x1a, 0xa2, 0xd1, 0x3f, 0x83, 0x1b, 0xa4,
	0x35, 0x1b, 0x42, 0xc9, 0x10, 0x50, 0x13, 0xf6, 0x5b, 0x31, 0xc8, 0x11, 0xb0, 0xc0, 0xa1, 0x9c,
	0xbf, 0x71, 0xa0, 0x1a, 0xa5, 0x09, 0xef, 0x18, 0x8e, 0xc6, 0x82, 0xc5, 0x54, 0x30, 0xc2, 0x64,
	0xcc, 0xd7, 0x92, 0x79, 0x87, 0x50, 0xef, 0xf9, 0x0b, 0x7e, 0xb7, 0x7f, 0x0d, 0x75, 0xc2, 0x68,
	0x70, 0x4b, 0xd8, 0x4d, 0xc2, 0xa4, 0xc2, 0x17, 0x60, 0x5d, 0x3e, 0xcd, 0xfc, 0x93, 0x21, 0x0d,
	0x11, 0xce, 0x95, 0x77, 0x04, 0x07, 0x96, 0x60, 0x15, 0x46, 0xf0, 0x64, 0x2c, 0x78, 0xcc, 0x25,
	0xcb, 0x9a, 0xd1, 0xca, 0xfd, 0x08, 0x6e, 0xa6, 0x8d, 0xd9, 0x3f, 0x56, 0x16, 0x9c, 0xc5, 0x78,
	0x7d, 0x68, 0xdd, 0xa7, 0x97, 0x9e, 0xf6, 0x05, 0xf3, 0xf2, 0x06, 0xf0, 0xb4, 0xcf, 0x54, 0x46,
	0x64, 0xa2, 0xa8, 0x4a, 0xe4, 0xf6, 0x6a, 0x5f, 0xa0, 0x34, 0x84, 0x67, 0xf7, 0x2b, 0xd9, 0x4b,
	0xbd, 0x82, 0x8a, 0x34, 0x11, 0x23, 0x70, 0xd8, 0xf9, 0xea, 0x7f, 0x05, 0x5a, 0xb8, 0x05, 0xbd,
	0xfc, 0x00, 0xc7, 0x9f, 0x24, 0xd1, 0x85, 0xea, 0xd5, 0xe8, 0xed, 0xe8, 0xdd, 0xc7, 0x51, 0x23,
	0x87, 0x75, 0xa8, 0x91, 0xde, 0x1f, 0xbd, 0xf3, 0xcb, 0x5e, 0xb7, 0x91, 0xd7, 0xa9, 0x71, 0x6f,
	0xd4, 0xbd, 0x18, 0xf5, 0x1b, 0x05, 0x04, 0xa8, 0x4c, 0x2e, 0x7f, 0xef, 0xf7, 0xba, 0x8d, 0x22,
	0x1e, 0x80, 0x73, 0xfe, 0x6e, 0x38, 0xbc, 0xb8, 0xd4, 0xb8, 0x52, 0xe7, 0x57, 0xa8, 0xda, 0x71,
	0xe3, 0xab, 0xdd, 0xd2, 0x35, 0x6f, 0x6d, 0xfa, 0xd2, 0xb5, 0x1e, 0xa5, 0x0f, 0xef, 0xbe, 0x27,
	0x72, 0x9d, 0xd7, 0x50, 0xd2, 0xae, 0xc0, 0xef, 0xec, 0xef, 0x1e, 0xc7, 0xbc, 0x5d, 0x7b, 0xa6,
	0xc9, 0x75, 0x7e, 0x81, 0xb2, 0x71, 0x01, 0xb6, 0xb7, 0x0b, 0x83, 0xca, 0x5a, 0xa9, 0x75, 0x9c,
	0x89, 0xdc, 0x11, 0xff, 0xc9, 0x03, 0x66, 0x8b, 0x67, 0x62, 0x13, 0xfa, 0x0c, 0xaf, 0x00, 0x3f,
	0x1d, 0x3a, 0x9e, 0xd8, 0xcf, 0xc4, 0xfd, 0xe6, 0x6a, 0x3d, 0x7f, 0x28, 0xbd, 0x3d, 0x0d, 0xff,
	0x84, 0xc7, 0xf7, 0x0d, 0x0e, 0x5f, 0x68, 0xe6, 0x67, 0xcc, 0xd1, 0x3a, 0x7d, 0x18, 0xb0, 0x15,
	0x9f, 0x55, 0xcc, 0x77, 0xf0, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x53, 0xf7, 0xa6, 0x8d,
	0x17, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrepareClient is the client API for Prepare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrepareClient interface {
	Prepare(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*PrepareResponse, error)
}

type prepareClient struct {
	cc *grpc.ClientConn
}

func NewPrepareClient(cc *grpc.ClientConn) PrepareClient {
	return &prepareClient{cc}
}

func (c *prepareClient) Prepare(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*PrepareResponse, error) {
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, "/pb.Prepare/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrepareServer is the server API for Prepare service.
type PrepareServer interface {
	Prepare(context.Context, *Payload) (*PrepareResponse, error)
}

func RegisterPrepareServer(s *grpc.Server, srv PrepareServer) {
	s.RegisterService(&_Prepare_serviceDesc, srv)
}

func _Prepare_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepareServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Prepare/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepareServer).Prepare(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Prepare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Prepare",
	HandlerType: (*PrepareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Prepare_Prepare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maobft.proto",
}

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/pb.Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo(context.Context, *Payload) (*EchoResponse, error)
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maobft.proto",
}

// ReadyClient is the client API for Ready service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReadyClient interface {
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type readyClient struct {
	cc *grpc.ClientConn
}

func NewReadyClient(cc *grpc.ClientConn) ReadyClient {
	return &readyClient{cc}
}

func (c *readyClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/pb.Ready/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadyServer is the server API for Ready service.
type ReadyServer interface {
	Ready(context.Context, *ReadyRequest) (*ReadyResponse, error)
}

func RegisterReadyServer(s *grpc.Server, srv ReadyServer) {
	s.RegisterService(&_Ready_serviceDesc, srv)
}

func _Ready_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadyServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ready/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadyServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ready_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Ready",
	HandlerType: (*ReadyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ready",
			Handler:    _Ready_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maobft.proto",
}

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// ProposeTransaction allows a client to propose a transaction.
	ProposeTransaction(ctx context.Context, in *ProposeTransactionRequest, opts ...grpc.CallOption) (*ProposeTransactionResponse, error)
	// GetTransactionStatus returns status of transaction.
	GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) ProposeTransaction(ctx context.Context, in *ProposeTransactionRequest, opts ...grpc.CallOption) (*ProposeTransactionResponse, error) {
	out := new(ProposeTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.TransactionService/ProposeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error) {
	out := new(GetTransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.TransactionService/GetTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// ProposeTransaction allows a client to propose a transaction.
	ProposeTransaction(context.Context, *ProposeTransactionRequest) (*ProposeTransactionResponse, error)
	// GetTransactionStatus returns status of transaction.
	GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*GetTransactionStatusResponse, error)
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_ProposeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ProposeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TransactionService/ProposeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ProposeTransaction(ctx, req.(*ProposeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TransactionService/GetTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionStatus(ctx, req.(*GetTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeTransaction",
			Handler:    _TransactionService_ProposeTransaction_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _TransactionService_GetTransactionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maobft.proto",
}
